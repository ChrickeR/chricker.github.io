name: Deploy MkDocs (+ Log4brains v1)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  ADR_LOCAL_DIR: 'adr'        # where package.json, .log4brains.yml and ADR files live
  L4B_BASE_PATH: '/adr-l4b'   # no trailing slash for v1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout ---------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Log4brains v1: install & build (non-fatal) -----------------
      - name: Setup Node.js
        if: ${{ hashFiles('adr/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Show L4B config & ADRs (do not fail)
        if: ${{ hashFiles('adr/package.json') != '' }}
        working-directory: ${{ env.ADR_LOCAL_DIR }}
        continue-on-error: true
        run: |
          echo "== .log4brains.yml (v1 schema expected) =="
          if [ -f .log4brains.yml ]; then
            sed -n '1,200p' .log4brains.yml
          else
            echo "⚠️  Missing adr/.log4brains.yml (v1). Example:"
            echo "project:"
            echo "  name: \"TROi Architecture Decisions\""
            echo "  tz: \"Europe/Stockholm\""
            echo "  adrFolder: \"./docs/adr\""
          fi
          echo "== ADR folder listing =="
          ls -la ./docs/adr || true

      - name: Install Log4brains dependencies
        if: ${{ hashFiles('adr/package.json') != '' }}
        working-directory: ${{ env.ADR_LOCAL_DIR }}
        run: |
          echo "Node: $(node -v) | npm: $(npm -v)"
          npm install
          echo "package.json:" && cat package.json || true

      - name: Build Log4brains site (v1)
        if: ${{ hashFiles('adr/package.json') != '' }}
        working-directory: ${{ env.ADR_LOCAL_DIR }}
        continue-on-error: true
        run: |
          echo "Building Log4brains v1 with basePath=${L4B_BASE_PATH} …"
          npx -y log4brains@latest build --basePath "${L4B_BASE_PATH}" || echo "⚠️  L4B build failed (check .log4brains.yml and ADR files)."
          echo "== possible outputs =="
          ls -la .log4brains/out 2>/dev/null || echo "no .log4brains/out"
          ls -la site 2>/dev/null || echo "no site (legacy output)"

      - name: Embed Log4brains output into MkDocs (supports v1 & legacy)
        run: |
          mkdir -p docs/adr-l4b
          OUT_V1="${ADR_LOCAL_DIR}/.log4brains/out"
          OUT_LEG="${ADR_LOCAL_DIR}/site"
          if [ -d "$OUT_V1" ] && [ "$(ls -A "$OUT_V1" 2>/dev/null)" ]; then
            echo "Using v1 output: $OUT_V1"
            rm -rf docs/adr-l4b/*
            cp -r "$OUT_V1/"* docs/adr-l4b/
          elif [ -d "$OUT_LEG" ] && [ "$(ls -A "$OUT_LEG" 2>/dev/null)" ]; then
            echo "Using legacy output: $OUT_LEG"
            rm -rf docs/adr-l4b/*
            cp -r "$OUT_LEG/"* docs/adr-l4b/
          else
            echo "ℹ️ No L4B static output found; writing placeholder."
            printf '<!doctype html><meta charset="utf-8"><title>ADR</title><body style="font:16px system-ui;padding:24px">ADR site will appear here after a successful Log4brains build.</body>' > docs/adr-l4b/index.html
          fi
          echo "== docs/adr-l4b listing =="
          ls -la docs/adr-l4b | head -n 60

      # --- Add a persistent "Back to TROi" button (safe injection) ----
      - name: Add "Back to TROi" button on ADR site
        run: |
          if [ -d docs/adr-l4b ]; then
            # write tiny CSS
            printf '%s\n' \
'.troi-backlink{position:fixed;right:16px;bottom:16px;z-index:9999;display:inline-block;padding:10px 14px;border-radius:999px;background:#111;color:#fff;font:14px/1.2 system-ui,-apple-system,Segoe UI,Roboto,Arial;text-decoration:none;box-shadow:0 6px 20px rgba(0,0,0,.18),0 1px 3px rgba(0,0,0,.2);opacity:.92}' \
'.troi-backlink:hover{opacity:1;transform:translateY(-1px)}' \
> docs/adr-l4b/_backlink.css

            # write tiny HTML snippet
            printf '%s\n' \
'<link rel="stylesheet" href="/adr-l4b/_backlink.css">' \
'<a class="troi-backlink" href="https://troi.se/" aria-label="Back to TROi">← Back to TROi</a>' \
> docs/adr-l4b/_backlink.html

            # inject snippet before </body> in every HTML file (robust)
            find docs/adr-l4b -type f -name "*.html" -print0 | \
              xargs -0 -I{} sh -c 'awk '"'"'{print} /<\/body>/{system("cat docs/adr-l4b/_backlink.html")} '"'"' "$1" > "$1.tmp" && mv "$1.tmp" "$1"' sh {}
            echo "Inserted backlink on ADR pages."
          else
            echo "No docs/adr-l4b directory; skipping backlink injection."
          fi

      # --- MkDocs: build & publish ------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install MkDocs dependencies
        run: |
          pip install "mkdocs>=1.5" "mkdocs-material>=9.5"
          mkdocs --version

      - name: Build MkDocs
        run: |
          echo "== mkdocs.yml (head) =="
          sed -n '1,200p' mkdocs.yml
          mkdocs build --clean --verbose
          test -d site || (echo "❌ MkDocs did not produce site/"; exit 1)
          echo "== built site/ =="
          ls -la site | head -n 50

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
