{"version":3,"file":"index.js","sources":["../src/commands/ListCommand.ts","../src/utils.ts","../src/commands/NewCommand.ts","../src/cli.ts"],"sourcesContent":["import { Log4brains, SearchAdrsFilters, AdrDtoStatus } from \"@log4brains/core\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\n\ntype Deps = {\n  l4bInstance: Log4brains;\n  appConsole: AppConsole;\n};\n\nexport type ListCommandOpts = {\n  statuses: string;\n  raw: boolean;\n};\n\nexport class ListCommand {\n  private readonly l4bInstance: Log4brains;\n\n  private readonly console: AppConsole;\n\n  constructor({ l4bInstance, appConsole }: Deps) {\n    this.l4bInstance = l4bInstance;\n    this.console = appConsole;\n  }\n\n  async execute(opts: ListCommandOpts): Promise<void> {\n    const filters: SearchAdrsFilters = {};\n    if (opts.statuses) {\n      filters.statuses = opts.statuses.split(\",\") as AdrDtoStatus[];\n    }\n    const adrs = await this.l4bInstance.searchAdrs(filters);\n    const table = this.console.createTable({\n      head: [\"Slug\", \"Status\", \"Package\", \"Title\"]\n    });\n    adrs.forEach((adr) => {\n      table.push([\n        adr.slug,\n        adr.status.toUpperCase(),\n        adr.package || \"\",\n        adr.title || \"Untitled\"\n      ]);\n    });\n    this.console.printTable(table, opts.raw);\n  }\n}\n","import execa from \"execa\";\n\nexport async function previewAdr(slug: string): Promise<void> {\n  const subprocess = execa(\"log4brains\", [\"preview\", slug], {\n    stdio: \"inherit\"\n  });\n  subprocess.stdout?.pipe(process.stdout);\n  subprocess.stderr?.pipe(process.stderr);\n  await subprocess;\n}\n","/* eslint-disable no-await-in-loop */\nimport path from \"path\";\nimport { Log4brains, Log4brainsError } from \"@log4brains/core\";\nimport fs, { promises as fsP } from \"fs\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\nimport { previewAdr } from \"../utils\";\n\ntype Deps = {\n  l4bInstance: Log4brains;\n  appConsole: AppConsole;\n};\n\nexport type NewCommandOpts = {\n  quiet: boolean;\n  package?: string;\n  from?: string;\n};\n\nexport class NewCommand {\n  private readonly l4bInstance: Log4brains;\n\n  private readonly console: AppConsole;\n\n  constructor({ l4bInstance, appConsole }: Deps) {\n    this.l4bInstance = l4bInstance;\n    this.console = appConsole;\n  }\n\n  private detectCurrentPackageFromCwd(): string | undefined {\n    const { packages } = this.l4bInstance.config.project;\n    if (!packages) {\n      return undefined;\n    }\n    const cwd = path.resolve(\".\");\n    const match = packages\n      .filter((pkg) => cwd.includes(pkg.path))\n      .sort((a, b) => a.path.length - b.path.length)\n      .pop(); // returns the most precise path (ie. longest)\n    return match?.name;\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  async execute(opts: NewCommandOpts, titleArg?: string): Promise<void> {\n    const { packages } = this.l4bInstance.config.project;\n\n    let pkg = opts.package;\n    if (!opts.quiet && !pkg && packages && packages.length > 0) {\n      const currentPackage = this.detectCurrentPackageFromCwd();\n      const packageChoices = [\n        {\n          name: `Global`,\n          value: \"\"\n        },\n        ...packages.map((p) => ({\n          name: `Package: ${p.name}`,\n          value: p.name\n        }))\n      ];\n      pkg =\n        (await this.console.askListQuestion(\n          \"For which package do you want to create this new ADR?\",\n          packageChoices,\n          currentPackage\n        )) || undefined;\n    }\n\n    if (opts.quiet && !titleArg) {\n      throw new Log4brainsError(\"<title> is required when using --quiet\");\n    }\n    let title;\n    do {\n      title =\n        titleArg ||\n        (await this.console.askInputQuestion(\n          \"Title of the solved problem and its solution?\"\n        ));\n      if (!title.trim()) {\n        this.console.warn(\"Please enter a title\");\n      }\n    } while (!title.trim());\n\n    // const slug = await this.console.askInputQuestion(\n    //   \"We pre-generated a slug to identify this ADR. Press [ENTER] or enter another one.\",\n    //   await this.l4bInstance.generateAdrSlug(title, pkg)\n    // );\n    const slug = await this.l4bInstance.generateAdrSlug(title, pkg);\n\n    const adrDto = await this.l4bInstance.createAdrFromTemplate(slug, title);\n\n    // --from option (used by init-log4brains to create the starter ADRs)\n    // Since this is a private use case, we don't include it in CORE for now\n    if (opts.from) {\n      if (!fs.existsSync(opts.from)) {\n        throw new Log4brainsError(\"The given file does not exist\", opts.from);\n      }\n      // TODO: use streams\n      await fsP.writeFile(\n        adrDto.file.absolutePath,\n        await fsP.readFile(opts.from, \"utf-8\"),\n        \"utf-8\"\n      );\n    }\n\n    if (opts.quiet) {\n      this.console.println(adrDto.slug);\n      process.exit(0);\n    }\n\n    const activeAdrs = await this.l4bInstance.searchAdrs({\n      statuses: [\"accepted\"]\n    });\n    if (activeAdrs.length > 0) {\n      const supersedeChoices = [\n        {\n          name: \"No\",\n          value: \"\"\n        },\n        ...activeAdrs.map((a) => ({\n          name: a.title || \"Untitled\", // TODO: add package and maybe date + format with tabs\n          value: a.slug\n        }))\n      ];\n      const supersededSlug = await this.console.askListQuestion(\n        \"Does this ADR supersede a previous one?\",\n        supersedeChoices,\n        \"\"\n      );\n\n      if (supersededSlug !== \"\") {\n        await this.l4bInstance.supersedeAdr(supersededSlug, slug);\n        this.console.debug(\n          `${supersededSlug} was marked as superseded by ${slug}`\n        );\n      }\n    }\n\n    this.console.println();\n    this.console.success(`New ADR created: ${adrDto.file.relativePath}`);\n    this.console.println();\n\n    const actionChoices = [\n      {\n        name: \"Edit and preview\",\n        value: \"edit-and-preview\"\n      },\n      { name: \"Edit\", value: \"edit\" },\n      { name: \"Later\", value: \"close\" }\n    ];\n    const action = await this.console.askListQuestion(\n      \"How would you like to edit it?\",\n      actionChoices,\n      \"edit-and-preview\"\n    );\n\n    if (action === \"edit-and-preview\" || action === \"edit\") {\n      await this.l4bInstance.openAdrInEditor(slug, () => {\n        this.console.warn(\n          \"We were not able to detect your preferred editor :(\"\n        );\n        this.console.warn(\n          \"You can define it by setting your $VISUAL or $EDITOR environment variable in ~/.zshenv or ~/.bashrc\"\n        );\n      });\n\n      if (action === \"edit-and-preview\") {\n        await previewAdr(slug);\n      }\n    }\n\n    process.exit(0);\n  }\n}\n","import commander from \"commander\";\nimport terminalLink from \"terminal-link\";\nimport { Log4brains, Log4brainsError } from \"@log4brains/core\";\nimport { AppConsole, FailureExit } from \"@log4brains/cli-common\";\n\nimport {\n  ListCommand,\n  ListCommandOpts,\n  NewCommand,\n  NewCommandOpts\n} from \"./commands\";\n\nconst templateExampleUrl =\n  \"https://raw.githubusercontent.com/thomvaill/log4brains/stable/packages/init/assets/template.md\";\n\nlet l4bInstance: Log4brains;\nfunction getL4bInstance(): Log4brains {\n  if (!l4bInstance) {\n    l4bInstance = Log4brains.createFromCwd(process.env.LOG4BRAINS_CWD || \".\");\n  }\n  return l4bInstance;\n}\n\nfunction execWithErrorHandler<T>(\n  promise: Promise<T>,\n  appConsole: AppConsole\n): Promise<T> {\n  promise.catch((err) => {\n    if (\n      err instanceof Log4brainsError &&\n      err.name === \"The template.md file does not exist\"\n    ) {\n      appConsole.error(err);\n      appConsole.printlnErr(\n        `You can use this ${terminalLink(\n          \"template\",\n          templateExampleUrl\n        )} as an example`\n      );\n      throw new FailureExit();\n    }\n  });\n  return promise;\n}\n\ntype Deps = {\n  appConsole: AppConsole;\n};\n\nexport function createCli({ appConsole }: Deps): commander.Command {\n  const program = new commander.Command();\n\n  const adr = program\n    .command(\"adr\")\n    .description(\"Group of commands to manage your ADRs...\");\n\n  adr\n    .command(\"new [title]\")\n    .description(\"Create an ADR\", {\n      title: \"The title of the ADR. Required if --quiet is passed\"\n    })\n    .option(\"-q, --quiet\", \"Disable interactive mode\", false)\n    .option(\n      \"-p, --package <package>\",\n      \"To create the ADR for a specific package\"\n    )\n    .option(\n      \"--from <file>\",\n      \"Copy <file> contents into the ADR instead of using the default template\"\n    )\n    .action(\n      (title: string | undefined, opts: NewCommandOpts): Promise<void> => {\n        const cmd = new NewCommand({\n          l4bInstance: getL4bInstance(),\n          appConsole\n        });\n        return execWithErrorHandler(cmd.execute(opts, title), appConsole);\n      }\n    );\n\n  // adr\n  //   .command(\"quick\")\n  //   .description(\"Create a one-sentence ADR (Y-Statement)\")\n  //   .action(\n  //     (): Promise<void> => {\n  //       // TODO\n  //     }\n  //   );\n\n  adr\n    .command(\"list\")\n    .option(\n      \"-s, --statuses <statuses>\",\n      \"Filter on the given statuses, comma-separated\"\n    ) // TODO: list available statuses\n    .option(\"-r, --raw\", \"Use a raw format instead of a table\", false)\n    .description(\"List ADRs\")\n    .action(\n      (opts: ListCommandOpts): Promise<void> => {\n        const cmd = new ListCommand({\n          l4bInstance: getL4bInstance(),\n          appConsole\n        });\n        return execWithErrorHandler(cmd.execute(opts), appConsole);\n      }\n    );\n\n  return program;\n}\n"],"names":["ListCommand","constructor","l4bInstance","appConsole","console","execute","opts","filters","statuses","split","adrs","searchAdrs","table","createTable","head","forEach","adr","push","slug","status","toUpperCase","package","title","printTable","raw","previewAdr","subprocess","execa","stdio","stdout","pipe","process","stderr","NewCommand","detectCurrentPackageFromCwd","packages","config","project","undefined","cwd","path","resolve","match","filter","pkg","includes","sort","a","b","length","pop","name","titleArg","quiet","currentPackage","packageChoices","value","map","p","askListQuestion","Log4brainsError","askInputQuestion","trim","warn","generateAdrSlug","adrDto","createAdrFromTemplate","from","fs","existsSync","fsP","writeFile","file","absolutePath","readFile","println","exit","activeAdrs","supersedeChoices","supersededSlug","supersedeAdr","debug","success","relativePath","actionChoices","action","openAdrInEditor","templateExampleUrl","getL4bInstance","Log4brains","createFromCwd","env","LOG4BRAINS_CWD","execWithErrorHandler","promise","catch","err","error","printlnErr","terminalLink","FailureExit","createCli","program","commander","Command","command","description","option","cmd"],"mappings":"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"}