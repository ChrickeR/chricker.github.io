{"ast":null,"code":"import { Log4brainsError } from \"@log4brains/core\";\nimport { AppConsole } from \"@log4brains/cli-common\";\nimport { getLog4brainsInstance } from \"../../../lib/core-api\"; // TODO: get the global singleton of AppConsole instead of re-creating it\n\nconst debug = !!process.env.DEBUG;\nconst dev = false;\nconst appConsole = new AppConsole({\n  debug,\n  traces: debug || dev\n});\nexport default (async (req, res) => {\n  if (!req.query.slugAndMore || !Array.isArray(req.query.slugAndMore)) {\n    res.status(404).send(\"Not Found\");\n    return;\n  }\n\n  const uri = [...req.query.slugAndMore].join(\"/\");\n  const l4bInstance = getLog4brainsInstance(); // POST /adr/:slug/_open-in-editor\n\n  if (req.method === \"POST\" && uri.endsWith(\"/_open-in-editor\")) {\n    const slug = uri.replace(/\\/_open-in-editor$/, \"\");\n\n    try {\n      await l4bInstance.openAdrInEditor(slug, () => {\n        appConsole.warn(\"We were not able to detect your preferred editor\");\n        appConsole.warn(\"You can define it by setting your $VISUAL or $EDITOR environment variable in ~/.zshenv or ~/.bashrc\");\n      });\n      res.status(200).send(\"\");\n      return;\n    } catch (e) {\n      if (e instanceof Log4brainsError && e.name === \"This ADR does not exist\") {\n        res.status(404).send(\"Not Found\");\n        return;\n      }\n\n      throw e;\n    }\n  } // GET /adr/:slug\n  // TODO: remove this dead code when we are sure we don't need this route\n  // if (req.method === \"GET\") {\n  //   const adr = await l4bInstance.getAdrBySlug(uri);\n  //   if (adr) {\n  //     res\n  //       .status(200)\n  //       .json(\n  //         toAdr(\n  //           adr,\n  //           adr.supersededBy\n  //             ? await l4bInstance.getAdrBySlug(adr.supersededBy)\n  //             : undefined\n  //         )\n  //       );\n  //     return;\n  //   }\n  // }\n\n\n  res.status(404).send(\"Not Found\");\n});","map":null,"metadata":{},"sourceType":"module"}