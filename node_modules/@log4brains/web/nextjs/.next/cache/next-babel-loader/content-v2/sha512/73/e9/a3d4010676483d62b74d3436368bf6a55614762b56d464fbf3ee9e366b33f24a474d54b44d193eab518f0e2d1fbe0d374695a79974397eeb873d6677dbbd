{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _Snackbar from \"@material-ui/core/Snackbar\";\nimport _IconButton from \"@material-ui/core/IconButton\";\nimport _Close from \"@material-ui/icons/Close\";\nimport _ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport _Edit from \"@material-ui/icons/Edit\";\nimport _Tooltip from \"@material-ui/core/Tooltip\";\nimport _Button from \"@material-ui/core/Button\";\nimport _Label from \"@material-ui/icons/Label\";\nimport _Event from \"@material-ui/icons/Event\";\nimport _Typography from \"@material-ui/core/Typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _CropFree from \"@material-ui/icons/CropFree\";\nimport _Person from \"@material-ui/icons/Person\";\nimport _People from \"@material-ui/icons/People\";\nimport _SvgIcon from \"@material-ui/core/SvgIcon\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport copyTextToClipboard from \"copy-text-to-clipboard\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { AiFillGithub as GithubRIcon, AiFillGitlab as GitlabRIcon } from \"react-icons/ai\";\nimport { DiBitbucket as BitbucketRIcon, DiGit as GitRIcon } from \"react-icons/di\";\nimport { FiLink as LinkRIcon } from \"react-icons/fi\";\nimport clsx from \"clsx\";\nimport { AdrStatusChip } from \"../../../../components\";\n\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nfunction getRepositoryIcon(provider) {\n  switch (provider) {\n    case \"github\":\n      return /*#__PURE__*/_jsx(_SvgIcon, {\n        children: /*#__PURE__*/_jsx(GithubRIcon, {})\n      });\n      break;\n\n    case \"gitlab\":\n      return /*#__PURE__*/_jsx(_SvgIcon, {\n        children: /*#__PURE__*/_jsx(GitlabRIcon, {})\n      });\n      break;\n\n    case \"bitbucket\":\n      return /*#__PURE__*/_jsx(_SvgIcon, {\n        children: /*#__PURE__*/_jsx(BitbucketRIcon, {})\n      });\n      break;\n\n    default:\n      return /*#__PURE__*/_jsx(_SvgIcon, {\n        children: /*#__PURE__*/_jsx(GitRIcon, {})\n      });\n      break;\n  }\n}\n\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    color: theme.palette.grey[700],\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  inlineInfo: {\n    display: \"flex\",\n    \"& > *\": {\n      marginLeft: theme.spacing(0.5),\n      marginRight: theme.spacing(0.5)\n    },\n    \"& > *:first-child\": {\n      marginLeft: 0\n    },\n    \"& > *:last-child\": {\n      marginRight: 0\n    }\n  },\n  icon: {\n    verticalAlign: \"middle\"\n  },\n  tags: {\n    color: theme.palette.grey[600]\n  }\n}));\n\nasync function editLocally(slug) {\n  await fetch(`/api/adr/${slug}/_open-in-editor`, {\n    method: \"post\"\n  });\n}\n\nexport function AdrHeader({\n  className,\n  adr,\n  locallyEditable = false\n}) {\n  const classes = useStyles();\n  const [linkCopiedSnackIsOpened, linkCopiedSnackSetOpened] = React.useState(false);\n\n  const linkCopiedSnackClose = () => {\n    linkCopiedSnackSetOpened(false);\n  };\n\n  const decidersIcon = adr.deciders.length > 1 ? /*#__PURE__*/_jsx(_People, {\n    className: classes.icon,\n    fontSize: \"inherit\"\n  }) : /*#__PURE__*/_jsx(_Person, {\n    className: classes.icon,\n    fontSize: \"inherit\"\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: clsx(className, classes.root),\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: classes.inlineInfo,\n          children: [adr.package ? /*#__PURE__*/_jsxs(_Typography, {\n            variant: \"body2\",\n            title: \"Package\",\n            children: [/*#__PURE__*/_jsx(_CropFree, {\n              className: classes.icon,\n              fontSize: \"inherit\"\n            }), \" \", adr.package]\n          }) : null, /*#__PURE__*/_jsxs(_Typography, {\n            variant: \"body2\",\n            title: adr.publicationDate ? \"Publication date\" : \"Creation date\",\n            children: [/*#__PURE__*/_jsx(_Event, {\n              className: classes.icon,\n              fontSize: \"inherit\"\n            }), \" \", moment(adr.publicationDate || adr.creationDate).format(\"ll\")]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            title: \"Status\",\n            children: /*#__PURE__*/_jsx(AdrStatusChip, {\n              status: adr.status\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(_Typography, {\n          variant: \"body2\",\n          title: adr.deciders.length > 0 ? `Decider${adr.deciders.length > 1 ? \"s\" : \"\"}` : \"Author\",\n          children: [decidersIcon, \" \", adr.deciders.length > 0 ? adr.deciders.join(\", \") : adr.lastEditAuthor]\n        }), adr.tags.length > 0 ? /*#__PURE__*/_jsxs(_Typography, {\n          variant: \"body2\",\n          title: \"Tags\",\n          children: [/*#__PURE__*/_jsx(_Label, {\n            className: classes.icon,\n            fontSize: \"inherit\"\n          }), \" \", /*#__PURE__*/_jsx(\"span\", {\n            className: classes.tags,\n            children: adr.tags.map(tag => `#${tag}`).join(\" \")\n          })]\n        }) : null]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(_ButtonGroup, {\n            size: \"medium\",\n            children: [/*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Copy link\",\n              children: /*#__PURE__*/_jsx(_Button, {\n                onClick: () => {\n                  copyTextToClipboard(window.location.href.replace(window.location.hash, \"\"));\n                  linkCopiedSnackSetOpened(true);\n                },\n                children: /*#__PURE__*/_jsx(_SvgIcon, {\n                  children: /*#__PURE__*/_jsx(LinkRIcon, {})\n                })\n              })\n            }), adr.repository ? /*#__PURE__*/_jsx(_Tooltip, {\n              title: `View/edit on ${adr.repository.provider === \"generic\" ? \"Git\" : capitalize(adr.repository.provider)}`,\n              children: /*#__PURE__*/_jsx(_Button, {\n                href: adr.repository.viewUrl,\n                target: \"_blank\",\n                rel: \"noopener\",\n                children: getRepositoryIcon(adr.repository.provider)\n              })\n            }) : null, locallyEditable ? /*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Edit locally\",\n              children: /*#__PURE__*/_jsx(_Button, {\n                color: \"secondary\",\n                onClick: () => editLocally(adr.slug),\n                children: /*#__PURE__*/_jsx(_Edit, {})\n              })\n            }) : null]\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(_Snackbar, {\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"right\"\n      },\n      open: linkCopiedSnackIsOpened,\n      onClose: linkCopiedSnackClose,\n      autoHideDuration: 6000,\n      message: \"Link copied to clipboard\",\n      action: /*#__PURE__*/_jsx(_IconButton, {\n        size: \"small\",\n        \"aria-label\": \"close\",\n        color: \"inherit\",\n        onClick: linkCopiedSnackClose,\n        title: \"Close\",\n        children: /*#__PURE__*/_jsx(_Close, {\n          fontSize: \"small\"\n        })\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}