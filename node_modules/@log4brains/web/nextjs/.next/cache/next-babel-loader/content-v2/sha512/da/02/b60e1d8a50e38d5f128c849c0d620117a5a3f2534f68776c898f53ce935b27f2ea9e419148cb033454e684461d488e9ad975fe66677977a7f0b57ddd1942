{"ast":null,"code":"import _defineProperty from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { SearchBox } from \"../../../../components/SearchBox\";\nimport { createSearchInstance } from \"../../../../lib/search\";\nimport { Log4brainsMode, Log4brainsModeContext } from \"../../../../contexts\";\nexport function ConnectedSearchBox(props) {\n  var mode = React.useContext(Log4brainsModeContext);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchInstance = _React$useState2[0],\n      setSearchInstance = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      pendingSearch = _React$useState4[0],\n      setPendingSearchState = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      searchQuery = _React$useState6[0],\n      setSearchQueryState = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      searchResults = _React$useState8[0],\n      setSearchResultsState = _React$useState8[1];\n\n  var handleSearchQueryChange = function handleSearchQueryChange(query) {\n    setSearchQueryState(query);\n\n    if (query.trim() === \"\") {\n      setSearchResultsState([]);\n      return;\n    }\n\n    if (searchInstance) {\n      setSearchResultsState(searchInstance.search(query));\n\n      if (pendingSearch) {\n        setPendingSearchState(false);\n      }\n    } else {\n      setPendingSearchState(true);\n    }\n  };\n\n  var handleFocus = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!searchInstance || mode === Log4brainsMode.preview)) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.t0 = setSearchInstance;\n              _context.next = 4;\n              return createSearchInstance(mode);\n\n            case 4:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleFocus() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Trigger a possible pending search after setting the search instance\n\n\n  if (pendingSearch && searchInstance) {\n    handleSearchQueryChange(searchQuery);\n  }\n\n  return /*#__PURE__*/_jsx(SearchBox, _objectSpread(_objectSpread({}, props), {}, {\n    onQueryChange: function onQueryChange(_, query) {\n      return handleSearchQueryChange(query);\n    },\n    query: searchQuery,\n    results: searchResults,\n    onFocus: handleFocus,\n    loading: pendingSearch\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}