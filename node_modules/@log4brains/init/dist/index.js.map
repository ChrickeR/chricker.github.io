{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/commands/InitCommand.ts","../src/cli.ts"],"sourcesContent":["import { promises as fsP } from \"fs\";\n\nfunction escapeRegExp(str: string) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\n/**\n * string.replaceAll() polyfill\n * TODO: remove when support down to Node 15\n * @param str\n * @param search\n * @param replacement\n */\nfunction replaceAll(str: string, search: string, replacement: string): string {\n  return str.replace(new RegExp(escapeRegExp(search), \"g\"), replacement);\n}\n\nexport async function replaceAllInFile(\n  path: string,\n  replacements: [string, string][]\n): Promise<void> {\n  let content = await fsP.readFile(path, \"utf-8\");\n  content = replacements.reduce((prevContent, replacement) => {\n    return replaceAll(prevContent, replacement[0], replacement[1]);\n  }, content);\n  await fsP.writeFile(path, content, \"utf-8\");\n}\n","/* eslint-disable no-await-in-loop */\n/* eslint-disable class-methods-use-this */\nimport fs, { promises as fsP } from \"fs\";\nimport terminalLink from \"terminal-link\";\nimport chalk from \"chalk\";\nimport execa from \"execa\";\nimport mkdirp from \"mkdirp\";\nimport yaml from \"yaml\";\nimport path from \"path\";\nimport moment from \"moment-timezone\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\nimport { FailureExit } from \"@log4brains/cli-common\";\nimport { replaceAllInFile } from \"../utils\";\n\nconst assetsPath = path.resolve(path.join(__dirname, \"../assets\")); // only one level up because bundled with microbundle\nconst docLink = \"https://github.com/thomvaill/log4brains\";\n\nfunction forceUnixPath(p: string): string {\n  return p.replace(/\\\\/g, \"/\");\n}\n\nexport type InitCommandOpts = {\n  defaults: boolean;\n};\n\ntype L4bYmlPackageConfig = {\n  name: string;\n  path: string;\n  adrFolder: string;\n};\ntype L4bYmlConfig = {\n  project: {\n    name: string;\n    tz: string;\n    adrFolder: string;\n    packages?: L4bYmlPackageConfig[];\n  };\n};\n\ntype Deps = {\n  appConsole: AppConsole;\n};\n\nexport class InitCommand {\n  private readonly console: AppConsole;\n\n  constructor({ appConsole }: Deps) {\n    this.console = appConsole;\n  }\n\n  private guessMainAdrFolderPath(cwd: string): string | undefined {\n    const usualPaths = [\n      \"./docs/adr\",\n      \"./docs/adrs\",\n      \"./docs/architecture-decisions\",\n      \"./doc/adr\",\n      \"./doc/adrs\",\n      \"./doc/architecture-decisions\",\n      \"./adr\",\n      \"./adrs\",\n      \"./architecture-decisions\"\n    ];\n    // eslint-disable-next-line no-restricted-syntax\n    for (const possiblePath of usualPaths) {\n      if (fs.existsSync(path.join(cwd, possiblePath))) {\n        return possiblePath;\n      }\n    }\n    return undefined;\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  private async buildLog4brainsConfigInteractively(\n    cwd: string,\n    noInteraction: boolean\n  ): Promise<L4bYmlConfig> {\n    this.console.println(chalk.bold(\"👋 Welcome to Log4brains!\"));\n    this.console.println();\n    this.console.println(\n      \"This interactive script will help you configure Log4brains for your project.\"\n    );\n    this.console.println(\n      `It will create the ${chalk.cyan(\".log4brains.yml\")} config file,`\n    );\n    this.console.println(\"        copy the default ADR template,\");\n    this.console.println(\"        and create your first ADR for you!\");\n    this.console.println();\n    this.console.println(\n      \"Before going further, please check that you are running this command\"\n    );\n    this.console.println(\n      \"from the root folder of your project's git repository:\"\n    );\n    this.console.println(chalk.cyan(cwd));\n\n    // Continue?\n    if (\n      !noInteraction &&\n      !(await this.console.askYesNoQuestion(\"Continue?\", true))\n    ) {\n      process.exit(0);\n    }\n\n    this.console.println();\n    this.console.println(\n      \"👍 We will now ask you several questions to get you started:\"\n    );\n\n    // Name\n    let name;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,global-require,import/no-dynamic-require,@typescript-eslint/no-var-requires\n      name = require(path.join(cwd, \"package.json\")).name as string;\n    } catch (e) {\n      // ignore\n    }\n\n    name = noInteraction\n      ? name || \"untitled\"\n      : await this.console.askInputQuestionAndValidate(\n          \"What is the name of your project?\",\n          (answer) => !!answer.trim(),\n          name\n        );\n\n    // Project type\n    const type = noInteraction\n      ? \"mono\"\n      : await this.console.askListQuestion(\n          \"Which statement describes the best your project?\",\n          [\n            {\n              name: \"Simple project (only one ADR folder)\",\n              value: \"mono\",\n              short: \"Mono-package project\"\n            },\n            {\n              name:\n                \"Multi-package project (one ADR folder per package + a global one)\",\n              value: \"multi\",\n              short: \"Multi-package project\"\n            }\n          ]\n        );\n\n    // Main ADR folder location\n    let adrFolder = this.guessMainAdrFolderPath(cwd);\n    if (adrFolder) {\n      this.console.println();\n      this.console.println(\n        `${chalk.blue.bold(\n          \"i We have detected a folder with existing ADRs:\"\n        )} ${chalk.cyan(adrFolder)}`\n      );\n      adrFolder =\n        noInteraction ||\n        (await this.console.askYesNoQuestion(\n          \"Do you want to use it? (existing ADRs will be kept)\",\n          true\n        ))\n          ? adrFolder\n          : undefined;\n    }\n    if (!adrFolder) {\n      adrFolder = noInteraction\n        ? \"./docs/adr\"\n        : await this.console.askInputQuestionAndValidate(\n            `In which directory do you plan to store your ${\n              type === \"multi\" ? \"global \" : \"\"\n            }ADRs? (will be automatically created)`,\n            (answer) => !!answer.trim(),\n            \"./docs/adr\"\n          );\n    }\n    await mkdirp(path.join(cwd, adrFolder));\n    this.console.println();\n\n    // Packages\n    const packages = [];\n    if (type === \"multi\") {\n      this.console.println(\"We will now define your packages...\");\n      this.console.println();\n\n      let oneMorePackage = false;\n      let packageNumber = 1;\n      do {\n        this.console.println();\n        this.console.println(\n          `  ${chalk.underline(`Package #${packageNumber}`)}:`\n        );\n        const pkgName = await this.console.askInputQuestionAndValidate(\n          \"Name? (short, lowercase, without special characters, nor spaces)\",\n          (answer) => !!answer.trim()\n        );\n        const pkgCodeFolder = await this.askPathWhileNotFound(\n          \"Where is the source code of this package located?\",\n          cwd,\n          `./packages/${pkgName}`\n        );\n        const pkgAdrFolder = await this.console.askInputQuestionAndValidate(\n          `In which directory do you plan to store the ADRs of this package? (will be automatically created)`,\n          (answer) => !!answer.trim(),\n          `${pkgCodeFolder}/docs/adr`\n        );\n        await mkdirp(path.join(cwd, pkgAdrFolder));\n        packages.push({\n          name: pkgName,\n          path: forceUnixPath(pkgCodeFolder),\n          adrFolder: forceUnixPath(pkgAdrFolder)\n        });\n        oneMorePackage = await this.console.askYesNoQuestion(\n          `We are done with package #${packageNumber}. Do you want to add another one?`,\n          false\n        );\n        packageNumber += 1;\n      } while (oneMorePackage);\n    }\n\n    return {\n      project: {\n        name,\n        tz: moment.tz.guess(),\n        adrFolder: forceUnixPath(adrFolder),\n        packages\n      }\n    };\n  }\n\n  private async createAdr(\n    cwd: string,\n    adrFolder: string,\n    title: string,\n    source: string,\n    replacements: [string, string][] = []\n  ): Promise<string> {\n    const slug = (\n      await execa(\n        \"log4brains\",\n        [\n          \"adr\",\n          \"new\",\n          \"--quiet\",\n          \"--from\",\n          forceUnixPath(path.join(assetsPath, source)),\n          `\"${title}\"`\n        ],\n        { cwd }\n      )\n    ).stdout;\n\n    await replaceAllInFile(\n      forceUnixPath(path.join(cwd, adrFolder, `${slug}.md`)),\n      [\n        [\"{DATE_YESTERDAY}\", moment().subtract(1, \"days\").format(\"YYYY-MM-DD\")], // we use yesterday's date so that we are sure new ADRs will appear on top\n        ...replacements\n      ]\n    );\n\n    return slug;\n  }\n\n  private async copyFileIfAbsent(\n    cwd: string,\n    adrFolder: string,\n    filename: string,\n    contentCb?: (content: string) => string\n  ): Promise<void> {\n    const outPath = path.join(cwd, adrFolder, filename);\n    if (!fs.existsSync(outPath)) {\n      let content = await fsP.readFile(\n        path.join(assetsPath, filename),\n        \"utf-8\"\n      );\n      if (contentCb) {\n        content = contentCb(content);\n      }\n      await fsP.writeFile(outPath, content);\n    }\n  }\n\n  private printSuccess(): void {\n    this.console.success(\"Log4brains is configured! 🎉🎉🎉\");\n    this.console.println();\n    this.console.println(\"You can now use the CLI to create a new ADR:\");\n    this.console.println(`  ${chalk.cyan(`log4brains adr new`)}`);\n    this.console.println(\"\");\n    this.console.println(\n      \"And start the web UI to preview your architecture knowledge base:\"\n    );\n    this.console.println(`  ${chalk.cyan(`log4brains preview`)}`);\n    this.console.println();\n    this.console.println(\n      \"Do not forget to set up your CI/CD to automatically publish your knowledge base\"\n    );\n    this.console.println(\n      `Check out the ${terminalLink(\n        \"documentation\",\n        docLink\n      )} to see some examples`\n    );\n  }\n\n  private async askPathWhileNotFound(\n    question: string,\n    cwd: string,\n    defaultValue?: string\n  ): Promise<string> {\n    const p = await this.console.askInputQuestion(question, defaultValue);\n    if (!p.trim() || !fs.existsSync(path.join(cwd, p))) {\n      this.console.warn(\"This path does not exist. Please try again...\");\n      return this.askPathWhileNotFound(question, cwd, defaultValue);\n    }\n    return p;\n  }\n\n  /**\n   * Command flow.\n   *\n   * @param options\n   * @param customCwd\n   */\n  async execute(options: InitCommandOpts, customCwd?: string): Promise<void> {\n    const noInteraction = options.defaults;\n\n    const cwd = customCwd ? path.resolve(customCwd) : process.cwd();\n    if (!fs.existsSync(cwd)) {\n      this.console.fatal(`The given path does not exist: ${chalk.cyan(cwd)}`);\n      throw new FailureExit();\n    }\n\n    // Terminate now if already configured\n    if (fs.existsSync(path.join(cwd, \".log4brains.yml\"))) {\n      this.console.warn(`${chalk.bold(\".log4brains.yml\")} already exists`);\n      this.console.warn(\n        \"Please delete it and re-run this command if you want to configure it again\"\n      );\n      this.console.println();\n      this.printSuccess();\n      return;\n    }\n\n    // Create .log4brains.yml interactively\n    const config = await this.buildLog4brainsConfigInteractively(\n      cwd,\n      noInteraction\n    );\n\n    this.console.startSpinner(\"Writing config file...\");\n    const { adrFolder } = config.project;\n    await fsP.writeFile(\n      path.join(cwd, \".log4brains.yml\"),\n      yaml.stringify(config),\n      \"utf-8\"\n    );\n\n    // Copy template, index and README if not already created\n    this.console.updateSpinner(\"Copying template files...\");\n    await this.copyFileIfAbsent(cwd, adrFolder, \"template.md\");\n    await this.copyFileIfAbsent(cwd, adrFolder, \"index.md\", (content) =>\n      content.replace(/{PROJECT_NAME}/g, config.project.name)\n    );\n    await this.copyFileIfAbsent(cwd, adrFolder, \"README.md\");\n\n    // List existing ADRs\n    this.console.updateSpinner(\"Creating your first ADRs...\");\n    const adrListRes = await execa(\"log4brains\", [\"adr\", \"list\", \"--raw\"], {\n      cwd\n    });\n\n    // Create Log4brains ADR\n    const l4bAdrSlug = await this.createAdr(\n      cwd,\n      adrFolder,\n      \"Use Log4brains to manage the ADRs\",\n      \"use-log4brains-to-manage-the-adrs.md\"\n    );\n\n    // Create MADR ADR if there was no ADR in the repository\n    if (!adrListRes.stdout) {\n      await this.createAdr(\n        cwd,\n        adrFolder,\n        \"Use Markdown Architectural Decision Records\",\n        \"use-markdown-architectural-decision-records.md\",\n        [[\"{LOG4BRAINS_ADR_SLUG}\", l4bAdrSlug]]\n      );\n    }\n\n    // End\n    this.console.stopSpinner();\n    this.printSuccess();\n  }\n}\n","import commander from \"commander\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\nimport { InitCommand, InitCommandOpts } from \"./commands\";\n\ntype Deps = {\n  appConsole: AppConsole;\n};\n\nexport function createInitCli({ appConsole }: Deps): commander.Command {\n  const program = new commander.Command();\n\n  program\n    .command(\"init\")\n    .arguments(\"[path]\")\n    .description(\"Configures Log4brains for your project\", {\n      path: \"Path of your project. Default: current directory\"\n    })\n    .option(\n      \"-d, --defaults\",\n      \"Run in non-interactive mode and use the common default options\",\n      false\n    )\n    .action(\n      (path: string | undefined, options: InitCommandOpts): Promise<void> => {\n        return new InitCommand({ appConsole }).execute(options, path);\n      }\n    );\n\n  return program;\n}\n"],"names":["escapeRegExp","str","replace","replaceAll","search","replacement","RegExp","replaceAllInFile","path","replacements","content","fsP","readFile","reduce","prevContent","writeFile","assetsPath","resolve","join","__dirname","docLink","forceUnixPath","p","InitCommand","constructor","appConsole","console","guessMainAdrFolderPath","cwd","usualPaths","possiblePath","fs","existsSync","undefined","buildLog4brainsConfigInteractively","noInteraction","println","chalk","bold","cyan","askYesNoQuestion","process","exit","name","require","e","askInputQuestionAndValidate","answer","trim","type","askListQuestion","value","short","adrFolder","blue","mkdirp","packages","oneMorePackage","packageNumber","underline","pkgName","pkgCodeFolder","askPathWhileNotFound","pkgAdrFolder","push","project","tz","moment","guess","createAdr","title","source","slug","execa","stdout","subtract","format","copyFileIfAbsent","filename","contentCb","outPath","printSuccess","success","terminalLink","question","defaultValue","askInputQuestion","warn","execute","options","customCwd","defaults","fatal","FailureExit","config","startSpinner","yaml","stringify","updateSpinner","adrListRes","l4bAdrSlug","stopSpinner","createInitCli","program","commander","Command","command","arguments","description","option","action"],"mappings":"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"}