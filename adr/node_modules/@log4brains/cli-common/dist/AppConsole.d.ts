import CliTable3, { Table } from "cli-table3";
export declare type AppConsoleOptions = {
    debug: boolean;
    traces: boolean;
};
export declare type ChoiceDefinition<V extends string> = {
    name: string;
    value: V;
    short?: string;
};
export declare class AppConsole {
    private readonly opts;
    private spinner?;
    private spinnerConsoleCapturer;
    constructor(opts?: Partial<AppConsoleOptions>);
    isSpinning(): boolean;
    startSpinner(message: string): void;
    updateSpinner(message: string): void;
    stopSpinner(withError?: boolean): void;
    println(message?: any, ...optionalParams: any[]): void;
    printlnErr(message?: any, ...optionalParams: any[]): void;
    debug(message?: any, ...optionalParams: any[]): void;
    warn(messageOrErr: string | Error): void;
    error(messageOrErr: string | Error): void;
    fatal(messageOrErr: string | Error): void;
    success(message: string): void;
    createTable(options?: CliTable3.TableConstructorOptions): Table;
    printTable(table: Table, raw?: boolean): void;
    askYesNoQuestion(question: string, defaultValue: boolean): Promise<boolean>;
    askInputQuestion(question: string, defaultValue?: string): Promise<string>;
    askInputQuestionAndValidate(question: string, validationCb: (answer: string) => boolean | string, defaultValue?: string): Promise<string>;
    askListQuestion<V extends string>(question: string, choices: ChoiceDefinition<V>[], defaultValue?: V): Promise<V>;
}
//# sourceMappingURL=AppConsole.d.ts.map