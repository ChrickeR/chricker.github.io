{"version":3,"file":"index.module.js","sources":["../cli/utils.ts","../cli/commands/preview.ts","../nextjs/src/lib-shared/search/Search.ts","../nextjs/src/lib-shared/types.ts","../cli/commands/build.ts","../cli/cli.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport { ConsoleCapturer } from \"@log4brains/cli-common\";\nimport { Log4brains } from \"@log4brains/core\";\nimport path from \"path\";\n\nlet l4bInstance: Log4brains;\nexport function getL4bInstance(): Log4brains {\n  if (!l4bInstance) {\n    l4bInstance = Log4brains.createFromCwd(process.env.LOG4BRAINS_CWD || \".\");\n  }\n  return l4bInstance;\n}\n\nexport function getNextJsDir(): string {\n  return path.resolve(path.join(__dirname, \"../nextjs\")); // only one level up because bundled with microbundle\n}\n\n/**\n * #NEXTJS-HACK\n * We want to hide the output of Next.js when we execute CLI commands.\n *\n * @param fn The code which calls Next.js methods for which we want to capture the output\n */\nexport async function execNext(fn: () => Promise<void>): Promise<void> {\n  const debug = !!process.env.DEBUG;\n\n  const capturer = new ConsoleCapturer();\n  capturer.onLog = (method, args, stream) => {\n    if (stream === \"stderr\" || debug) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      capturer.doPrintln(...[\"[Next] \", ...args].map((a) => chalk.dim(a)));\n    }\n  };\n\n  capturer.start();\n  await fn();\n  capturer.stop();\n}\n","import next from \"next\";\nimport { createServer } from \"http\";\nimport SocketIO from \"socket.io\";\nimport chalk from \"chalk\";\nimport open from \"open\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\nimport { execNext, getL4bInstance, getNextJsDir } from \"../utils\";\n\ntype Deps = {\n  appConsole: AppConsole;\n};\n\ntype SystemError = Error & { code?: string };\nfunction isSystemError(obj: unknown): obj is SystemError {\n  return obj instanceof Error && \"code\" in obj;\n}\n\nexport async function previewCommand(\n  { appConsole }: Deps,\n  port: number,\n  openBrowser: boolean,\n  adrSlug?: string\n): Promise<void> {\n  process.env.NEXT_TELEMETRY_DISABLED = \"1\";\n  const dev = process.env.NODE_ENV === \"development\";\n\n  appConsole.startSpinner(\"Log4brains is starting...\");\n  appConsole.debug(`Run \\`next ${dev ? \"dev\" : \"start\"}\\`...`);\n\n  const app = next({\n    dev,\n    dir: getNextJsDir()\n  });\n\n  await execNext(async () => {\n    await app.prepare();\n  });\n\n  /**\n   * #NEXTJS-HACK\n   * We override this private property to set the incrementalCache in \"dev\" mode (ie. it disables it)\n   * to make our Hot Reload feature work.\n   * In fact, we trigger a page re-render every time an ADR changes and we absolutely need up-to-date data on every render.\n   * The \"serve stale data while revalidating\" Next.JS policy is not suitable for us.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  app.server.incrementalCache.incrementalOptions.dev = true; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const srv = createServer(app.getRequestHandler());\n\n  // FileWatcher with Socket.io\n  const io = SocketIO(srv);\n\n  const { fileWatcher } = getL4bInstance();\n  fileWatcher.subscribe((event) => {\n    appConsole.debug(`[FileWatcher] ${event.type} - ${event.relativePath}`);\n    io.emit(\"FileWatcher\", event);\n  });\n  fileWatcher.start();\n\n  try {\n    await execNext(\n      () =>\n        new Promise((resolve, reject) => {\n          // This code catches EADDRINUSE error if the port is already in use\n          srv.on(\"error\", reject);\n          srv.on(\"listening\", () => resolve());\n          srv.listen(port);\n        })\n    );\n  } catch (err) {\n    appConsole.stopSpinner();\n\n    if (isSystemError(err) && err.code === \"EADDRINUSE\") {\n      if (openBrowser && adrSlug) {\n        appConsole.println(\n          chalk.dim(\n            \"Log4brains is already started. We open the browser and exit\"\n          )\n        );\n        await open(`http://localhost:${port}/adr/${adrSlug}`);\n        process.exit(0);\n      }\n\n      appConsole.fatal(\n        `Port ${port} is already in use. Use the -p <PORT> option to select another one.`\n      );\n      process.exit(1);\n    } else if (isSystemError(err) && err.code === \"EACCES\") {\n      appConsole.fatal(\n        `Impossible to use port ${port} (permission denied). Use the -p <PORT> option to select another one.`\n      );\n      process.exit(1);\n    }\n\n    throw err;\n  }\n\n  appConsole.stopSpinner();\n  appConsole.println(\n    `Your Log4brains preview is ðŸš€ on ${chalk.underline.blueBright(\n      `http://localhost:${port}/`\n    )}`\n  );\n  appConsole.println(\n    chalk.dim(\n      \"Hot Reload is enabled: any change you make to a markdown file is applied live\"\n    )\n  );\n\n  if (dev) {\n    appConsole.println();\n    appConsole.println(\n      `${chalk.bgBlue.white.bold(\" DEV \")} ${chalk.blue(\n        \"Next.js' Fast Refresh is enabled\"\n      )}`\n    );\n    appConsole.println();\n  }\n\n  if (openBrowser) {\n    await open(`http://localhost:${port}/${adrSlug ? `adr/${adrSlug}` : \"\"}`);\n  }\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { AdrDto } from \"@log4brains/core\";\nimport lunr from \"lunr\";\n\ntype AdrForSearch = {\n  title: string;\n  verbatim: string; // body without Markdown or HTML tags, without recurring headers\n};\n\nexport type SerializedIndex = {\n  lunr: object;\n  adrs: [string, AdrForSearch][];\n};\n\nexport type SearchResult = {\n  slug: string;\n  href: string;\n  title: string;\n\n  /**\n   * A number between 0 and 1 representing how similar this document is to the query.\n   * @see lunr.Index.Result\n   */\n  score: number;\n\n  // TODO: add highlighted verbatim (https://github.com/thomvaill/log4brains/issues/5)\n};\n\nfunction mapToJson<K, V>(map: Map<K, V>): [K, V][] {\n  return Array.from(map.entries());\n}\n\nfunction mapFromJson<K, V>(entries: [K, V][]): Map<K, V> {\n  return new Map(entries);\n}\n\n/**\n * Inspired by https://github.com/squidfunk/mkdocs-material/tree/master/src/assets/javascripts/integrations/search\n */\nexport class Search {\n  private constructor(\n    private readonly index: lunr.Index,\n    private readonly adrs: Map<string, AdrForSearch>\n  ) {}\n\n  search(query: string): SearchResult[] {\n    return this.index.search(`${query}*`).map((result) => {\n      const adr = this.adrs.get(result.ref);\n      if (!adr) {\n        throw new Error(`Invalid Search instance: missing ADR \"${result.ref}\"`);\n      }\n      return {\n        slug: result.ref,\n        href: `/adr/${result.ref}`,\n        title: adr.title,\n        score: result.score\n      };\n    });\n  }\n\n  serializeIndex(): SerializedIndex {\n    return { lunr: this.index.toJSON(), adrs: mapToJson(this.adrs) };\n  }\n\n  static createFromAdrs(adrs: AdrDto[]): Search {\n    const adrsForSearch = new Map<string, AdrForSearch>(\n      adrs.map((adr) => [\n        adr.slug,\n        {\n          title: adr.title || \"Untitled\",\n          verbatim: adr.body.enhancedMdx // TODO: remove tags (https://github.com/thomvaill/log4brains/issues/5)\n        }\n      ])\n    );\n\n    const index = lunr((builder) => {\n      builder.ref(\"slug\");\n      builder.field(\"title\", { boost: 1000 });\n      builder.field(\"verbatim\");\n      // eslint-disable-next-line no-param-reassign\n      builder.metadataWhitelist = [\"position\"];\n\n      adrsForSearch.forEach((adr, slug) => {\n        builder.add({\n          slug,\n          title: adr.title,\n          verbatim: adr.verbatim\n        });\n      });\n    });\n    return new Search(index, adrsForSearch);\n  }\n\n  static createFromSerializedIndex(serializedIndex: SerializedIndex): Search {\n    return new Search(\n      lunr.Index.load(serializedIndex.lunr),\n      mapFromJson(serializedIndex.adrs)\n    );\n  }\n}\n","import { AdrDto } from \"@log4brains/core\";\n\nexport type Adr = Omit<AdrDto, \"supersededBy\" | \"body\"> & {\n  supersededBy: AdrLight | null;\n  body: { enhancedMdx: string };\n};\n\nexport type AdrLight = Pick<\n  Adr,\n  \"slug\" | \"package\" | \"title\" | \"status\" | \"creationDate\" | \"publicationDate\"\n>;\n\nexport function toAdrLight(adr: AdrDto | Adr | AdrLight): AdrLight {\n  return {\n    slug: adr.slug,\n    package: adr.package,\n    title: adr.title,\n    status: adr.status,\n    creationDate: adr.creationDate,\n    publicationDate: adr.publicationDate\n  };\n}\n\nexport function toAdr(dto: AdrDto, superseder?: AdrLight): Adr {\n  if (dto.supersededBy && !superseder) {\n    throw new Error(\"You forgot to pass the superseder\");\n  }\n  if (superseder && superseder.slug !== dto.supersededBy) {\n    throw new Error(\n      \"The given superseder does not match the `supersededBy` field\"\n    );\n  }\n\n  return {\n    ...dto,\n    supersededBy: superseder ? toAdrLight(superseder) : null,\n    body: {\n      enhancedMdx: dto.body.enhancedMdx\n    }\n  };\n}\n","import chalk from \"chalk\";\nimport build from \"next/dist/build\";\nimport exportApp from \"next/dist/export\";\nimport loadConfig from \"next/dist/next-server/server/config\";\nimport { PHASE_EXPORT } from \"next/dist/next-server/lib/constants\";\nimport path from \"path\";\nimport mkdirp from \"mkdirp\";\nimport { makeBadge } from \"badge-maker\";\nimport { promises as fsP } from \"fs\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\nimport { Search } from \"@lib-shared/search\";\nimport { toAdrLight } from \"@lib-shared/types\";\nimport { execNext, getL4bInstance, getNextJsDir } from \"../utils\";\n\ntype Deps = {\n  appConsole: AppConsole;\n};\n\nexport async function buildCommand(\n  { appConsole }: Deps,\n  outPath: string,\n  basePath: string\n): Promise<void> {\n  process.env.NEXT_TELEMETRY_DISABLED = \"1\";\n  appConsole.println(\"Building Log4brains...\");\n\n  const nextDir = getNextJsDir();\n  // eslint-disable-next-line global-require,import/no-dynamic-require,@typescript-eslint/no-var-requires\n  const nextConfig = require(path.join(nextDir, \"next.config.js\")) as Record<\n    string,\n    unknown\n  >;\n\n  // We use a different distDir than the preview mode\n  // because getStaticPath()'s `fallback` config is somehow cached\n  const distDir = \".next-export\";\n  const nextCustomConfig = {\n    ...nextConfig,\n    distDir,\n    basePath,\n    env: {\n      ...(nextConfig.env && typeof nextConfig.env === \"object\"\n        ? nextConfig.env\n        : {}),\n      NEXT_PUBLIC_LOG4BRAINS_STATIC: \"1\"\n    }\n  };\n\n  appConsole.debug(\"Run `next build`...\");\n  await execNext(async () => {\n    // #NEXTJS-HACK: build() is not meant to be called from the outside of Next.js\n    // And there is an error in their typings: `conf?` is typed as `null`, so we have to use @ts-ignore\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    await build(nextDir, nextCustomConfig);\n  });\n\n  appConsole.debug(\"Run `next export`...\");\n  await execNext(async () => {\n    await exportApp(\n      nextDir,\n      {\n        outdir: outPath\n      },\n      await loadConfig(PHASE_EXPORT, nextDir, nextCustomConfig) // Configuration is not handled like in build() here\n    );\n  });\n\n  appConsole.startSpinner(\"Generating ADR data...\");\n  const buildId = await fsP.readFile(\n    path.join(nextDir, distDir, \"BUILD_ID\"),\n    \"utf-8\"\n  );\n\n  // TODO: move to a dedicated module\n  await mkdirp(path.join(outPath, \"data\", buildId));\n  const adrs = await getL4bInstance().searchAdrs();\n\n  // TODO: remove this dead code when we are sure we don't need a JSON file per ADR\n\n  // const packages = new Set<string>();\n  // adrs.forEach((adr) => adr.package && packages.add(adr.package));\n  // const mkdirpPromises = Array.from(packages).map((pkg) =>\n  //   mkdirp(path.join(outPath, `data/adr/${pkg}`))\n  // );\n  // await Promise.all(mkdirpPromises);\n\n  const promises = [\n    // ...adrs.map((adr) =>\n    //   fsP.writeFile(\n    //     path.join(outPath, \"data\", buildId, \"adr\", `${adr.slug}.json`),\n    //     JSON.stringify(\n    //       toAdr(\n    //         adr,\n    //         adr.supersededBy ? getAdrBySlug(adr.supersededBy, adrs) : undefined\n    //       )\n    //     ),\n    //     \"utf-8\"\n    //   )\n    // ),\n    fsP.writeFile(\n      path.join(outPath, \"data\", buildId, \"adrs.json\"),\n      JSON.stringify(adrs.map(toAdrLight)),\n      \"utf-8\"\n    )\n  ];\n  await Promise.all(promises);\n\n  // Badge\n  await fsP.writeFile(\n    path.join(outPath, \"badge.svg\"),\n    makeBadge({\n      label: \"ADRs\",\n      message: adrs.length.toString(),\n      color: \"#FF007B\"\n    })\n  );\n\n  appConsole.updateSpinner(\"Generating search index...\");\n  await fsP.writeFile(\n    path.join(outPath, \"data\", buildId, \"search-index.json\"),\n    JSON.stringify(Search.createFromAdrs(adrs).serializeIndex()),\n    \"utf-8\"\n  );\n\n  appConsole.stopSpinner();\n  appConsole.success(\n    `Your Log4brains static site was successfully generated to ${chalk.cyan(\n      outPath\n    )} with a total of ${chalk.cyan(`${adrs.length} ADRs`)}`\n  );\n  appConsole.println();\n  process.exit(0); // otherwise Next.js's spinner keeps running\n}\n","import commander from \"commander\";\nimport type { AppConsole } from \"@log4brains/cli-common\";\nimport { previewCommand, buildCommand } from \"./commands\";\n\ntype StartEditorCommandOpts = {\n  port: string;\n  open: boolean;\n};\ntype BuildCommandOpts = {\n  out: string;\n  basePath: string;\n};\n\ntype Deps = {\n  appConsole: AppConsole;\n};\n\nexport function createWebCli({ appConsole }: Deps): commander.Command {\n  const program = new commander.Command();\n\n  program\n    .command(\"preview [adr]\")\n    .description(\"Start Log4brains locally to preview your changes\", {\n      adr:\n        \"If provided, will automatically open your browser to this specific ADR\"\n    })\n    .option(\"-p, --port <port>\", \"Port to listen on\", \"4004\")\n    .option(\"--no-open\", \"Do not open the browser automatically\", false)\n    .action(\n      (adr: string, opts: StartEditorCommandOpts): Promise<void> => {\n        return previewCommand(\n          { appConsole },\n          parseInt(opts.port, 10),\n          opts.open,\n          adr\n        );\n      }\n    );\n\n  program\n    .command(\"build\")\n    .description(\"Build Log4brains as a deployable static website\")\n    .option(\"-o, --out <path>\", \"Output path\", \".log4brains/out\")\n    .option(\"--basePath <path>\", \"Custom base path\", \"\")\n    .action(\n      (opts: BuildCommandOpts): Promise<void> => {\n        return buildCommand({ appConsole }, opts.out, opts.basePath);\n      }\n    );\n\n  return program;\n}\n"],"names":["l4bInstance","getL4bInstance","Log4brains","createFromCwd","process","env","LOG4BRAINS_CWD","getNextJsDir","path","resolve","join","__dirname","execNext","fn","debug","DEBUG","capturer","ConsoleCapturer","onLog","method","args","stream","doPrintln","map","a","chalk","dim","start","stop","isSystemError","obj","Error","previewCommand","appConsole","port","openBrowser","adrSlug","NEXT_TELEMETRY_DISABLED","dev","NODE_ENV","startSpinner","app","next","dir","prepare","server","incrementalCache","incrementalOptions","srv","createServer","getRequestHandler","io","SocketIO","fileWatcher","subscribe","event","type","relativePath","emit","Promise","reject","on","listen","err","stopSpinner","code","println","open","exit","fatal","underline","blueBright","bgBlue","white","bold","blue","mapToJson","Array","from","entries","mapFromJson","Map","Search","constructor","index","adrs","search","query","result","adr","get","ref","slug","href","title","score","serializeIndex","lunr","toJSON","createFromAdrs","adrsForSearch","verbatim","body","enhancedMdx","builder","field","boost","metadataWhitelist","forEach","add","createFromSerializedIndex","serializedIndex","Index","load","toAdrLight","package","status","creationDate","publicationDate","buildCommand","outPath","basePath","nextDir","nextConfig","require","distDir","nextCustomConfig","NEXT_PUBLIC_LOG4BRAINS_STATIC","build","exportApp","outdir","loadConfig","PHASE_EXPORT","buildId","fsP","readFile","mkdirp","searchAdrs","promises","writeFile","JSON","stringify","all","makeBadge","label","message","length","toString","color","updateSpinner","success","cyan","createWebCli","program","commander","Command","command","description","option","action","opts","parseInt","out"],"mappings":"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"}