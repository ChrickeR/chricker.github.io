{"ast":null,"code":"import _Typography from \"@material-ui/core/Typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Link from \"@material-ui/core/Link\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport { TocBuilder as TocModelBuilder } from \"../../lib/toc-utils\";\nimport { MarkdownHeading } from \"../MarkdownHeading\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      \"& > ul\": {\n        padding: \"0 !important\"\n      }\n    },\n    title: {\n      fontWeight: theme.typography.fontWeightBold,\n      paddingBottom: theme.spacing(1)\n    },\n    tocUl: {\n      listStyleType: \"none\",\n      paddingLeft: \"1rem\"\n    }\n  });\n});\n\nfunction variantToLevel(variant) {\n  return parseInt(variant.replace(\"h\", \"\"), 10);\n}\n\nfunction isMarkdownHeadingElement(element) {\n  return typeof element.type === \"function\" && element.type === MarkdownHeading;\n}\n\nfunction buildTocModelFromContent(content) {\n  var levelStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var builder = new TocModelBuilder();\n  React.Children.forEach(content, function (element) {\n    if (isMarkdownHeadingElement(element)) {\n      builder.addSection(variantToLevel(element.props.variant) - levelStart + 1, element.props.children, element.props.id);\n    }\n  });\n  return builder.getToc();\n}\n\nfunction TocSection(_ref) {\n  var title = _ref.title,\n      id = _ref.id,\n      children = _ref.children;\n  var classes = useStyles();\n  return /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(_Link, {\n      href: \"#\".concat(id),\n      children: title\n    }), children ? /*#__PURE__*/_jsx(\"ul\", {\n      className: classes.tocUl,\n      children: children\n    }) : null]\n  });\n}\n\nexport function MarkdownToc(_ref2) {\n  var className = _ref2.className,\n      content = _ref2.content,\n      _ref2$levelStart = _ref2.levelStart,\n      levelStart = _ref2$levelStart === void 0 ? 1 : _ref2$levelStart;\n  var classes = useStyles();\n\n  if (!content) {\n    return null;\n  }\n\n  var model = buildTocModelFromContent(content, levelStart);\n\n  if (model.children.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: clsx(classes.root, className),\n    children: [/*#__PURE__*/_jsx(_Typography, {\n      variant: \"subtitle2\",\n      className: classes.title,\n      children: \"Table of contents\"\n    }), /*#__PURE__*/_jsx(\"ul\", {\n      className: classes.tocUl,\n      children: model.render(function (title, id, children) {\n        return /*#__PURE__*/_jsx(TocSection, {\n          title: title,\n          id: id,\n          children: children\n        }, id);\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}