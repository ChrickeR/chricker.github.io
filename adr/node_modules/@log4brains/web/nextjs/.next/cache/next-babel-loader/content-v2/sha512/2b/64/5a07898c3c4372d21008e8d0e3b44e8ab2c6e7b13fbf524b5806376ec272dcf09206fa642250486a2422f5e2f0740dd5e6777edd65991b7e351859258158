{"ast":null,"code":"import _Link from \"@material-ui/core/Link\";\nimport _defineProperty from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _Typography from \"@material-ui/core/Typography\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useMemo } from \"react\";\nimport { compiler as mdCompiler } from \"markdown-to-jsx\";\nimport { useRouter } from \"next/router\";\nimport hljs from \"highlight.js\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { AdrLink } from \"./components\";\nimport { MarkdownHeading } from \"../MarkdownHeading\";\nimport { slugify } from \"../../lib/slugify\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    code: {\n      backgroundColor: \"#F8F8F8\",\n      borderRadius: theme.shape.borderRadius,\n      padding: 3\n    },\n    listItem: {}\n  });\n});\n\nfunction Li(props) {\n  var classes = useStyles();\n  return /*#__PURE__*/_jsx(\"li\", {\n    className: classes.listItem,\n    children: /*#__PURE__*/_jsx(_Typography, _objectSpread({\n      component: \"span\"\n    }, props))\n  });\n}\n\nfunction Code(props) {\n  var classes = useStyles();\n  var children = props.children;\n  return /*#__PURE__*/_jsx(\"code\", {\n    className: classes.code,\n    children: children\n  });\n}\n\nvar options = {\n  overrides: {\n    h1: {\n      component: _Typography,\n      props: {\n        variant: \"h3\",\n        component: \"h1\",\n        gutterBottom: true\n      }\n    },\n    h2: {\n      component: MarkdownHeading,\n      props: {\n        variant: \"h2\"\n      }\n    },\n    h3: {\n      component: MarkdownHeading,\n      props: {\n        variant: \"h3\"\n      }\n    },\n    h4: {\n      component: MarkdownHeading,\n      props: {\n        variant: \"h4\"\n      }\n    },\n    p: {\n      component: _Typography,\n      props: {\n        paragraph: true\n      }\n    },\n    a: {\n      component: _Link\n    },\n    li: {\n      component: Li\n    },\n    AdrLink: {\n      component: AdrLink\n    },\n    code: {\n      component: Code\n    }\n  },\n  slugify: slugify\n};\n\nfunction isReactElementWithChildren(obj) {\n  return \"children\" in obj.props; // TODO: improve tests here\n}\n\nexport function Markdown(_ref) {\n  var children = _ref.children,\n      onCompiled = _ref.onCompiled;\n  var rootRef = React.useRef(null);\n  var router = useRouter();\n  var renderedMarkdown = useMemo(function () {\n    return mdCompiler(children.replace( // Fix for `index.md`'s adr-workflow.png image path\n    // TODO: support local images (https://github.com/thomvaill/log4brains/issues/4)\n    /\\((\\/l4b-static\\/[^)]+)\\)/g, \"(\".concat(router === null || router === void 0 ? void 0 : router.basePath, \"$1)\")), options);\n  }, [children, router]);\n  useEffect(function () {\n    if (onCompiled && isReactElementWithChildren(renderedMarkdown)) {\n      onCompiled(renderedMarkdown.props.children);\n    }\n  }, [children, renderedMarkdown, onCompiled]);\n  useEffect(function () {\n    if (isReactElementWithChildren(renderedMarkdown)) {\n      var _rootRef$current;\n\n      (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.querySelectorAll(\"pre code\").forEach(function (block) {\n        hljs.highlightBlock(block);\n      });\n    }\n  }, [children, renderedMarkdown]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: rootRef,\n    children: renderedMarkdown\n  });\n}","map":null,"metadata":{},"sourceType":"module"}