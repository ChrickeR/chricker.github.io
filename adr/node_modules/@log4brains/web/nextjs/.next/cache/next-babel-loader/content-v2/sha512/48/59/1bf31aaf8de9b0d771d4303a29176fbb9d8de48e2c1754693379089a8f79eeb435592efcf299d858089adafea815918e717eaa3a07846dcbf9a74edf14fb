{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheets } from \"@material-ui/core/styles\";\nimport { theme } from \"../mui\"; // @see https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js\n\nexport default class MyDocument extends Document {\n  render() {\n    return /*#__PURE__*/_jsxs(Html, {\n      lang: \"en\",\n      children: [/*#__PURE__*/_jsxs(Head, {\n        children: [/*#__PURE__*/_jsx(\"meta\", {\n          name: \"theme-color\",\n          content: theme.palette.primary.main\n        }), /*#__PURE__*/_jsx(\"link\", {\n          rel: \"preconnect\",\n          href: \"https://fonts.gstatic.com\"\n        }), /*#__PURE__*/_jsx(\"link\", {\n          href: \"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\",\n          rel: \"stylesheet\"\n        }), /*#__PURE__*/_jsx(\"link\", {\n          rel: \"stylesheet\",\n          href: \"https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300;400;500;700&display=swap\"\n        })]\n      }), /*#__PURE__*/_jsxs(\"body\", {\n        children: [/*#__PURE__*/_jsx(Main, {}), !process.env.NEXT_PUBLIC_LOG4BRAINS_STATIC && /*#__PURE__*/_jsx(\"script\", {\n          src: \"/socket.io/socket.io.js\"\n        }), /*#__PURE__*/_jsx(NextScript, {})]\n      })]\n    });\n  }\n\n} // `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with server-side generation (SSG).\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect( /*#__PURE__*/_jsx(App, _objectSpread({}, props)))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread(_objectSpread({}, initialProps), {}, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}