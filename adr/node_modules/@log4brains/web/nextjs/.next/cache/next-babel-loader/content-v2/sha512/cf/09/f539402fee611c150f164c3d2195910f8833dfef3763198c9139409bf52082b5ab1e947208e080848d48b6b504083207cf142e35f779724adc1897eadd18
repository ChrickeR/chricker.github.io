{"ast":null,"code":"import _classCallCheck from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Toc } from \"./Toc\";\nexport var TocBuilder = /*#__PURE__*/function () {\n  function TocBuilder() {\n    _classCallCheck(this, TocBuilder);\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"current\", void 0);\n\n    this.root = new Toc();\n    this.current = this.root;\n  }\n\n  _createClass(TocBuilder, [{\n    key: \"addSection\",\n    value: function addSection(level, title, id) {\n      if (level <= 0) {\n        throw new Error(\"Level must be > 0\");\n      }\n\n      if (level < this.current.getLevel() + 1) {\n        // eg: section to add = H2, current section = H2 -> we have to step back from one level\n        if (!this.current.parent) {\n          throw new Error(\"Never happens thanks to recursion\");\n        }\n\n        this.current = this.current.parent;\n        this.addSection(level, title, id);\n      } else if (level > this.current.getLevel() + 1) {\n        // eg: section to add = H4, current section = H2 -> we have to create an empty intermediate section\n        this.current = this.current.createChild(\"\", \"\");\n        this.addSection(level, title, id);\n      } else if (level === this.current.getLevel() + 1) {\n        // recursion stop condition\n        // eg: section to add = H2, current section = H1\n        this.current = this.current.createChild(title, id);\n      }\n    }\n  }, {\n    key: \"getToc\",\n    value: function getToc() {\n      return this.root;\n    }\n  }]);\n\n  return TocBuilder;\n}();","map":null,"metadata":{},"sourceType":"module"}