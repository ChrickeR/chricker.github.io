{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Toc } from \"./Toc\";\nexport class TocBuilder {\n  constructor() {\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"current\", void 0);\n\n    this.root = new Toc();\n    this.current = this.root;\n  }\n\n  addSection(level, title, id) {\n    if (level <= 0) {\n      throw new Error(\"Level must be > 0\");\n    }\n\n    if (level < this.current.getLevel() + 1) {\n      // eg: section to add = H2, current section = H2 -> we have to step back from one level\n      if (!this.current.parent) {\n        throw new Error(\"Never happens thanks to recursion\");\n      }\n\n      this.current = this.current.parent;\n      this.addSection(level, title, id);\n    } else if (level > this.current.getLevel() + 1) {\n      // eg: section to add = H4, current section = H2 -> we have to create an empty intermediate section\n      this.current = this.current.createChild(\"\", \"\");\n      this.addSection(level, title, id);\n    } else if (level === this.current.getLevel() + 1) {\n      // recursion stop condition\n      // eg: section to add = H2, current section = H1\n      this.current = this.current.createChild(title, id);\n    }\n  }\n\n  getToc() {\n    return this.root;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}