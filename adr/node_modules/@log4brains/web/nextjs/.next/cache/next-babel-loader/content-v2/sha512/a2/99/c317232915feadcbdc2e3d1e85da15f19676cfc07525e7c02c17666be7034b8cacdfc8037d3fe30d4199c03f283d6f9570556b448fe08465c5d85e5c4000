{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Typography from \"@material-ui/core/Typography\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Log4brainsMode, Log4brainsModeContext } from \"../../contexts\";\nimport { Markdown, TwoColContent } from \"../../components\"; // eslint-disable-next-line import/no-cycle\n\nimport { ConnectedAdrBrowserLayout } from \"../../layouts\";\nconst useStyles = makeStyles(() => createStyles({\n  previewAlert: {\n    width: \"38ch\"\n  },\n  previewAlertMessage: {\n    paddingTop: 2\n  }\n}));\nexport function IndexScene({\n  projectName,\n  markdown\n}) {\n  const classes = useStyles();\n  const mode = React.useContext(Log4brainsModeContext);\n  const previewAlert = mode === Log4brainsMode.preview ? /*#__PURE__*/_jsxs(Alert, {\n    severity: \"warning\",\n    className: classes.previewAlert,\n    classes: {\n      message: classes.previewAlertMessage\n    },\n    children: [/*#__PURE__*/_jsx(_Typography, {\n      variant: \"h6\",\n      children: \"Preview mode\"\n    }), /*#__PURE__*/_jsx(_Typography, {\n      variant: \"body2\",\n      children: \"Hot Reload is enabled on all pages\"\n    })]\n  }) : null;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [\"Architecture knowledge base of \", projectName]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: `This architecture knowledge base contains all the Architecture Decision Records (ADR) of the ${projectName} project`\n      })]\n    }), /*#__PURE__*/_jsx(TwoColContent, {\n      rightColContent: previewAlert,\n      children: /*#__PURE__*/_jsx(Markdown, {\n        children: markdown\n      })\n    })]\n  });\n}\n\nIndexScene.getLayout = (scene, sceneProps) => /*#__PURE__*/_jsx(ConnectedAdrBrowserLayout, _objectSpread(_objectSpread({}, sceneProps), {}, {\n  children: scene\n}));","map":null,"metadata":{},"sourceType":"module"}