{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { SearchBox } from \"../../../../components/SearchBox\";\nimport { createSearchInstance } from \"../../../../lib/search\";\nimport { Log4brainsMode, Log4brainsModeContext } from \"../../../../contexts\";\nexport function ConnectedSearchBox(props) {\n  const mode = React.useContext(Log4brainsModeContext);\n  const [searchInstance, setSearchInstance] = React.useState();\n  const [pendingSearch, setPendingSearchState] = React.useState(false);\n  const [searchQuery, setSearchQueryState] = React.useState(\"\");\n  const [searchResults, setSearchResultsState] = React.useState([]);\n\n  const handleSearchQueryChange = query => {\n    setSearchQueryState(query);\n\n    if (query.trim() === \"\") {\n      setSearchResultsState([]);\n      return;\n    }\n\n    if (searchInstance) {\n      setSearchResultsState(searchInstance.search(query));\n\n      if (pendingSearch) {\n        setPendingSearchState(false);\n      }\n    } else {\n      setPendingSearchState(true);\n    }\n  };\n\n  const handleFocus = async () => {\n    // We re-create the search instance on each focus in preview mode\n    if (!searchInstance || mode === Log4brainsMode.preview) {\n      setSearchInstance(await createSearchInstance(mode));\n    }\n  }; // Trigger a possible pending search after setting the search instance\n\n\n  if (pendingSearch && searchInstance) {\n    handleSearchQueryChange(searchQuery);\n  }\n\n  return /*#__PURE__*/_jsx(SearchBox, _objectSpread(_objectSpread({}, props), {}, {\n    onQueryChange: (_, query) => handleSearchQueryChange(query),\n    query: searchQuery,\n    results: searchResults,\n    onFocus: handleFocus,\n    loading: pendingSearch\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}