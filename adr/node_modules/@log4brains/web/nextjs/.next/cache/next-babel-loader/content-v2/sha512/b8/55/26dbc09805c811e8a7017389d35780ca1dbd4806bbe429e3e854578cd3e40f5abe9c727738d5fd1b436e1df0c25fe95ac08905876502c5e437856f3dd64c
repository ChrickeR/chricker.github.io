{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thomas/git/log4brains/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Router from \"next/router\";\nimport { Log4brainsMode } from \"../../contexts\";\nimport { Search } from \"../../lib-shared/search\";\n\nfunction isSerializedIndex(obj) {\n  return typeof obj === \"object\" && obj !== null && \"lunr\" in obj && \"adrs\" in obj && Array.isArray(obj.adrs);\n}\n\nexport function createSearchInstance(_x) {\n  return _createSearchInstance.apply(this, arguments);\n}\n\nfunction _createSearchInstance() {\n  _createSearchInstance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mode) {\n    var index;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(mode === Log4brainsMode.preview ? \"/api/search-index\" : \"\".concat(Router.basePath, \"/data/\").concat(process.env.NEXT_BUILD_ID, \"/search-index.json\"));\n\n          case 2:\n            _context.next = 4;\n            return _context.sent.json();\n\n          case 4:\n            index = _context.sent;\n\n            if (isSerializedIndex(index)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error(\"Invalid Search SerializedIndex: \".concat(index));\n\n          case 7:\n            return _context.abrupt(\"return\", Search.createFromSerializedIndex(index));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createSearchInstance.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}