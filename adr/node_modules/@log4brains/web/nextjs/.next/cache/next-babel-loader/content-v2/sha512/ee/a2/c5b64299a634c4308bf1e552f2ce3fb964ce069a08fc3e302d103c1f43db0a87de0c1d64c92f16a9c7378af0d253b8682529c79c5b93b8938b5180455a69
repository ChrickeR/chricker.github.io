{"ast":null,"code":"import _Typography from \"@material-ui/core/Typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Link from \"@material-ui/core/Link\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport { TocBuilder as TocModelBuilder } from \"../../lib/toc-utils\";\nimport { MarkdownHeading } from \"../MarkdownHeading\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    \"& > ul\": {\n      padding: \"0 !important\"\n    }\n  },\n  title: {\n    fontWeight: theme.typography.fontWeightBold,\n    paddingBottom: theme.spacing(1)\n  },\n  tocUl: {\n    listStyleType: \"none\",\n    paddingLeft: \"1rem\"\n  }\n}));\n\nfunction variantToLevel(variant) {\n  return parseInt(variant.replace(\"h\", \"\"), 10);\n}\n\nfunction isMarkdownHeadingElement(element) {\n  return typeof element.type === \"function\" && element.type === MarkdownHeading;\n}\n\nfunction buildTocModelFromContent(content, levelStart = 1) {\n  const builder = new TocModelBuilder();\n  React.Children.forEach(content, element => {\n    if (isMarkdownHeadingElement(element)) {\n      builder.addSection(variantToLevel(element.props.variant) - levelStart + 1, element.props.children, element.props.id);\n    }\n  });\n  return builder.getToc();\n}\n\nfunction TocSection({\n  title,\n  id,\n  children\n}) {\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(_Link, {\n      href: `#${id}`,\n      children: title\n    }), children ? /*#__PURE__*/_jsx(\"ul\", {\n      className: classes.tocUl,\n      children: children\n    }) : null]\n  });\n}\n\nexport function MarkdownToc({\n  className,\n  content,\n  levelStart = 1\n}) {\n  const classes = useStyles();\n\n  if (!content) {\n    return null;\n  }\n\n  const model = buildTocModelFromContent(content, levelStart);\n\n  if (model.children.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: clsx(classes.root, className),\n    children: [/*#__PURE__*/_jsx(_Typography, {\n      variant: \"subtitle2\",\n      className: classes.title,\n      children: \"Table of contents\"\n    }), /*#__PURE__*/_jsx(\"ul\", {\n      className: classes.tocUl,\n      children: model.render((title, id, children) => /*#__PURE__*/_jsx(TocSection, {\n        title: title,\n        id: id,\n        children: children\n      }, id))\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}