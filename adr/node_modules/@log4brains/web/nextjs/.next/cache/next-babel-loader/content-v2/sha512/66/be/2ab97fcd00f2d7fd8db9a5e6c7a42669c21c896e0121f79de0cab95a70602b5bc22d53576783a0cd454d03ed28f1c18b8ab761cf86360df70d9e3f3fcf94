{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\nimport lunr from \"lunr\";\n\nfunction mapToJson(map) {\n  return Array.from(map.entries());\n}\n\nfunction mapFromJson(entries) {\n  return new Map(entries);\n}\n/**\n * Inspired by https://github.com/squidfunk/mkdocs-material/tree/master/src/assets/javascripts/integrations/search\n */\n\n\nexport class Search {\n  constructor(index, adrs) {\n    this.index = index;\n    this.adrs = adrs;\n  }\n\n  search(query) {\n    return this.index.search(`${query}*`).map(result => {\n      const adr = this.adrs.get(result.ref);\n\n      if (!adr) {\n        throw new Error(`Invalid Search instance: missing ADR \"${result.ref}\"`);\n      }\n\n      return {\n        slug: result.ref,\n        href: `/adr/${result.ref}`,\n        title: adr.title,\n        score: result.score\n      };\n    });\n  }\n\n  serializeIndex() {\n    return {\n      lunr: this.index.toJSON(),\n      adrs: mapToJson(this.adrs)\n    };\n  }\n\n  static createFromAdrs(adrs) {\n    const adrsForSearch = new Map(adrs.map(adr => [adr.slug, {\n      title: adr.title || \"Untitled\",\n      verbatim: adr.body.enhancedMdx // TODO: remove tags (https://github.com/thomvaill/log4brains/issues/5)\n\n    }]));\n    const index = lunr(builder => {\n      builder.ref(\"slug\");\n      builder.field(\"title\", {\n        boost: 1000\n      });\n      builder.field(\"verbatim\"); // eslint-disable-next-line no-param-reassign\n\n      builder.metadataWhitelist = [\"position\"];\n      adrsForSearch.forEach((adr, slug) => {\n        builder.add({\n          slug,\n          title: adr.title,\n          verbatim: adr.verbatim\n        });\n      });\n    });\n    return new Search(index, adrsForSearch);\n  }\n\n  static createFromSerializedIndex(serializedIndex) {\n    return new Search(lunr.Index.load(serializedIndex.lunr), mapFromJson(serializedIndex.adrs));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}