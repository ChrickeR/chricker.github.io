{"pageProps":{"projectName":"Log4brains","currentAdr":{"slug":"20240926-transition-to-simplified-git-flow","package":null,"title":"Transition to Simplified Git Flow","status":"superseded","supersededBy":{"slug":"20241217-switch-back-to-github-flow","package":null,"title":"Switch back to GitHub Flow, but keeping the automated beta releases","status":"accepted","creationDate":"2024-12-17T11:14:06.000Z","publicationDate":"2024-12-17T22:59:59.000Z"},"tags":[],"deciders":[],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nThe existing GitHub Flow process lacked clarity for stable releases and was overly manual, making it hard to delegate and streamline contributions. The need was for a more structured yet simple workflow that would facilitate testing and contributions while automating releases.\n\nAdditional context in [Discussion #108: Does this project need a new maintainer?](https://github.com/thomvaill/log4brains/discussions/108)\n\n## Decision Drivers\n\n- Need for automation in releases.\n- Be able to merge more quickly whithout breaking the stable branch, while making it possible for beta testers to test the new features.\n- Easier delegation to new maintainers.\n- Simplified yet structured process for contributors.\n- Clearer separation between ongoing development and stable releases.\n\n## Considered Options\n\n- Continue with GitHub Flow.\n- Transition to Simplified Git Flow.\n- Full Git Flow with release branches.\n\n## Decision Outcome\n\nChosen option: **Simplified Git Flow**, because it provides structure (separating development from stable releases) without excessive complexity. It also allows for automated canary/beta releases and easier delegation for merging feature branches to `develop`.\n\n### Positive Consequences\n\n- Clear separation of development (`develop`) and stable (`stable`) branches.\n- Automated beta releases from `develop` to facilitate early testing.\n- Allows contributors to participate in testing beta features and reduces the manual overhead of testing and releasing stable versions\n- Easier to delegate responsibilities (Canary vs. Core Maintainers, see [CONTRIBUTING.md](CONTRIBUTING.md)).\n- More streamlined versioning via Conventional Commits.\n\n### Negative Consequences\n\n- Contributors need to adjust to using `develop` for PRs instead of `stable`.\n- Slight learning curve for Conventional Commits.\n\n## Pros and Cons of the Options\n\n### Continue with GitHub Flow\n\n- Good, because itâ€™s simpler with fewer branches.\n- Bad, because it lacks separation of development and stable code.\n- Bad, because manual testing and release increase bottlenecks.\n\n### Simplified Git Flow\n\n- Good, because it balances structure with simplicity.\n- Good, because it allows easier delegation to maintainers.\n- Bad, because it introduces a new `develop` branch, which may need adjustment for contributors.\n\n### Full Git Flow\n\n- Good, because it provides a full release management process.\n- Bad, because it adds unnecessary complexity for smaller open-source projects.\n"},"creationDate":"2024-10-28T10:13:28.000Z","lastEditDate":"2024-12-17T11:14:06.000Z","lastEditAuthor":"Thomas Vaillant","publicationDate":"2024-09-26T21:59:59.000Z","file":{"relativePath":"docs/adr/20240926-transition-to-simplified-git-flow.md","absolutePath":"/Users/thomas/git/log4brains/docs/adr/20240926-transition-to-simplified-git-flow.md"},"repository":{"provider":"github","viewUrl":"https://github.com/thomvaill/log4brains/blob/master/docs/adr/20240926-transition-to-simplified-git-flow.md"}},"l4bVersion":"1.1.0"},"__N_SSG":true}