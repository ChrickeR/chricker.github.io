{"pageProps":{"projectName":"Log4brains","currentAdr":{"slug":"web/20200925-use-nextjs-for-static-site-generation","package":"web","title":"Use Next.js for Static Site Generation","status":"accepted","supersededBy":null,"tags":["frontend","frameworks"],"deciders":[],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nLog4brains has two main features:\n\n- `edit mode` which lets the developer edit the ADRs from a web UI, which is served locally by running `npm run log4brains`\n  - The developer is also able to edit the markdown files directly from the IDE, which triggers a live-reload of the web UI\n- `build mode` which generates a static site ready to deploy on a Github-pages-like service, so that the ADRs are easily browsable. Usually run by the CI with `npm run log4brains-build`\n\nWe need to find the best way to develop these two modes.\n\n## Decision Drivers <!-- optional -->\n\n- Maximize code reusability between the two modes (ie. do not have to develop everything twice)\n- Time to Market:\n  - @Thomvaill (first contributor) is a Node/React/PHP developer\n  - @Thomvaill has 3 weeks available to develop and ship the first version of log4brains\n- Balance between completeness/readyness of the chosen solution and future customization\n  - This first version will have limited features for now but the chosen solution must be customizable enough to be able to implement the future features (ie. we can't choose a 100% opinionated and closed to modifications solution)\n\n## Considered Options\n\n- Option 1: MkDocs\n- Option 2: Docsify\n- Option 3: Docusaurus 2\n- Option 4: Gatsby\n- Option 5: Next.js\n\nOther SSG like Nuxt or Hugo were not considered, because similar to Gatsby and Next.js in terms of features, but developed with other technologies than React.\n\n## Decision Outcome\n\nChosen option: \"Option 5: Next.js\", because\n\n- Markdown powered solutions are not enough customizable for our needs\n- Gatsby and Next.js are quite similar, so it was hard to choose, but\n  - Gatsby is more opinionated, because of GraphQL\n  - I was influenced by this article: [Which To Choose in 2020: NextJS or Gatsby?](https://medium.com/frontend-digest/which-to-choose-in-2020-nextjs-vs-gatsby-1aa7ca279d8a)\n\n### Positive Consequences <!-- optional -->\n\n- We will use Typescript because Next.js supports it well\n\n## Pros and Cons of the Options <!-- optional -->\n\n### Option 1: MkDocs\n\n<https://www.mkdocs.org/>\n\n#### Pros\n\n- Already powered by Markdown\n- Very popular and actively maintained (10.8k stars on Github on 2020-09-22)\n- Extendable with plugins and themes\n- Live-reload already implemented\n\n#### Cons\n\n- `edit mode` can't be developed with a MkDoc plugin, so it has to be developed separately\n- Some manual config in `mkdocs.yml` is required for the navigation and/or some [Front Matter](https://jekyllrb.com/docs/front-matter/) config in each markdown file\n- Not 100% customizable, even with plugins\n- Python\n\n### Option 2: Docsify\n\n<https://docsify.js.org/>\n\n#### Pros\n\n- Already powered by Markdown\n- Very popular and actively maintained (15.1k stars on Github on 2020-09-22)\n- Extendable with plugins and themes\n- Live-reload already implemented\n- No need to generate static pages (lib served over a CDN, which reads directly the markdown files from the repo) -> CI setup simplified\n\n#### Cons\n\n- `edit mode` has to be developed separately\n- Some manual config in `_nav.yml` is required for the navigation\n- Not 100% customizable, even with plugins\n- No static pages generation (lib served over a CDN, which reads directly the markdown files from the repo) -> impossible to setup on private projects\n\n### Option 3: Docusaurus 2\n\n<https://v2.docusaurus.io/>\n\n#### Pros\n\n- Already powered by Markdown\n- Possible to create React pages as well -> good for extensibility\n- Very popular and actively maintained (19.1k stars on Github on 2020-09-22), even if the V2 is still in beta\n- Live-reload already implemented\n\n#### Cons\n\n- No obvious way to develop the `edit mode` without some hacks\n- Every markdown file require a [Front Matter](https://jekyllrb.com/docs/front-matter/) header\n\n### Option 4: Gatsby\n\n<https://www.gatsbyjs.com/>\n\n#### Pros\n\n- Easily extensible SSG framework\n- Very popular and actively maintained (47k stars on Github on 2020-09-22)\n- `edit mode` can be developed on top of the `gatsby develop` command\n- Typescript support\n\n#### Cons\n\n- Have to use GraphQL (opinionated framework)\n- Need more development to parse markdown files than an already Markdown powered solution\n\n### Option 5: Next.js\n\n<https://nextjs.org/>\n\n#### Pros\n\n- Easily extensible, non-opinionated SSG framework\n- Very popular and actively maintained (53.5k stars on Github on 2020-09-22)\n- `edit mode` can be developed on top of the `npm run dev` command\n- Typescript support\n\n#### Cons\n\n- Need more development to parse markdown files than an already Markdown powered solution\n\n## Links <!-- optional -->\n\n- [Curated list of Static Site Generators](https://www.staticgen.com/) used to compare them\n- [Which To Choose in 2020: NextJS or Gatsby?](https://medium.com/frontend-digest/which-to-choose-in-2020-nextjs-vs-gatsby-1aa7ca279d8a)\n"},"creationDate":"2020-09-25T16:34:23.000Z","lastEditDate":"2020-09-25T16:34:23.000Z","lastEditAuthor":"Thomas Vaillant","publicationDate":"2020-09-25T21:59:59.000Z","file":{"relativePath":"packages/web/docs/adr/20200925-use-nextjs-for-static-site-generation.md","absolutePath":"/Users/thomas/git/log4brains/packages/web/docs/adr/20200925-use-nextjs-for-static-site-generation.md"},"repository":{"provider":"github","viewUrl":"https://github.com/thomvaill/log4brains/blob/master/packages/web/docs/adr/20200925-use-nextjs-for-static-site-generation.md"}},"l4bVersion":"1.1.0"},"__N_SSG":true}